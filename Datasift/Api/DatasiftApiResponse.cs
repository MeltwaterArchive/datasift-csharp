using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;
using Datasift.DatasiftStream;

namespace Datasift.Api
{
    public class DatasiftApiResponse
    {
        private JObject json;
        /// <summary>
        /// Creates an object that can be used to get info out of an API response.
        /// </summary>
        /// <param name="responseData"></param>
        public DatasiftApiResponse(string responseData)
        {
            json = JObject.Parse(responseData);
        }
        /// <summary>
        /// Returns an immutable string representing the hash returned in this response
        /// OR null if the response does not have this val
        /// </summary>
        public string Hash { get { return json["hash"] == null ? null : json["hash"].ToString(); } set { } }

        /// <summary>
        /// Returns an immutable string representing the created_at value returned in this response
        /// OR null if the response does not have this val
        /// </summary>
        public string CreatedAt { get { return json["created_at"] == null ? null : json["created_at"].ToString(); } set { } }

        /// <summary>
        /// Returns an immutable string representing the cost returned in this response, i.e. the cost of making the request
        /// OR null if the response does not have this val. Not to be confused with StreamCosts which returns the total costs
        /// for an entire stream, not just the request which created this response!
        /// </summary>
        public string RequestCost { get { return json["cost"] == null ? null : json["cost"].ToString(); } set { } }

        /// <summary>
        /// Returns an immutable string representing the costs value returned in this response
        /// OR null if the response does not have this val
        /// NOTE:This is only valid if the request method that created the response was cost, i.e. api.datasift.net/cost
        /// </summary>
        public string StreamCosts { get { return json["costs"] == null ? null : json["costs"].ToString(); } set { } }

        /// <summary>
        /// Returns an immutable string representing the total cost returned in this response
        /// OR null if the response does not have this val
        /// NOTE:This is only valid if the request method that created the response was cost, i.e. api.datasift.net/cost
        /// </summary>
        public string Total { get { return json["total"] == null ? null : json["total"].ToString(); } set { } }

        /// <summary>
        /// Returns any errors generated by the request which resulted in this response object
        /// A 404 for example while using /recording means no recordings were found
        /// </summary>
        public string Error { get { return json["error"] == null ? null : json["error"].ToString(); } set { } }

        /// <summary>
        /// Returns true if this response contains an error message, false otherwise
        /// </summary>
        public bool IsError { get { return json["error"] == null ?false : true; } set { } }
        /// <summary>
        /// Returns an immutable list of Interactions returned in this response
        /// OR null if the response does not have this val
        /// </summary>
        public List<Interaction> Stream { get { return ApiResponseStream(); } set { } }
        /// <summary>
        /// Used for 
        /// /recording
        /// /recording/schedule
        /// /recording/update
        /// and any recording operation which returns a single recording object
        /// If you made a request to the API and provided a recording ID then this method returns a single recording object for the
        /// id you specified which then contains data about the recording.
        /// </summary>
        public Recording Recording { get { return json["start_time"] == null ? null : new Recording(json.ToString()); } set { } }
        /// <summary>
        /// If no recording ID is given then the API returns a list of all your recordings.
        /// This method returns all the available recordings that are returned
        /// </summary>
        public List<Recording> AllRecordings { get { return getAllRecordings(); } set { } }

        private List<Recording> getAllRecordings()
        {
            List<Recording> rec = new List<Recording>();
            JToken recordings = json["recordings"];
            if (recordings == null)
            {
                return null;
            }
            else
            {
                foreach (JToken item in recordings)
                {
                    rec.Add(new Recording(item.ToString()));
                }
                return rec;
            }
        }
        /// <summary>
        /// Gets the set of interaction objects returned in this stream
        /// </summary>
        /// <returns>A list of Interaction objects, one for each returned in the stream</returns>
        private List<Interaction> ApiResponseStream()
        {
            List<Interaction> interactions = new List<Interaction>();
            JToken stream = json["stream"];
            if (json["stream"] == null)
            {
                return null;
            }
            else
            {
                foreach (JToken item in json["stream"])
                {
                    interactions.Add(new Interaction(item.ToString()));
                }
                return interactions;
            }
        }


    }
    /// <summary>
    /// Recordings related data
    /// </summary>
    public class Recording{
        private JObject json;
        public Recording(string json)
        {
            this.json = JObject.Parse(json);
        }
        /// <summary>
        /// Returns the ID for this recording
        /// </summary>
        public string Id { get { return json["id"] == null ? null : json["id"].ToString(); } set { } }
        /// <summary>
        /// When the recording was/should start(ed)
        /// </summary>
        public string StartTime { get { return json["start_time"] == null ? null : json["start_time"].ToString(); } set { } }
        /// <summary>
        /// When the recording should finish or finished
        /// </summary>
        public string FinishTime { get { return json["finish_time"] == null ? null : json["finish_time"].ToString(); } set { } }
        /// <summary>
        /// The name of this recording
        /// </summary>
        public string Name { get { return json["name"] == null ? null : json["name"].ToString(); } set { } }
        /// <summary>
        /// The stream hash for this recording
        /// </summary>
        public string Hash { get { return json["hash"] == null ? null : json["hash"].ToString(); } set { } }
    }
}
